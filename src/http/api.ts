/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * NLW Connect
 * OpenAPI spec version: 0.0.1
 */
export type SubscriberToEventBody = {
	name: string;
	email: string;
	/** @nullable */
	referrer?: string | null;
};

export type SubscriberToEvent201 = {
	subscriberId: string;
};

export type GetSubscriberInviteClicksCount200 = {
	count: number;
};

export type GetSubscriberInvitesCount200 = {
	count: number;
};

export type GetSubscriberInviteRankingPosition200 = {
	/** @nullable */
	position: number | null;
};

export type GetRanking200RankingListItem = {
	id: string;
	name: string;
	score: number;
};

export type GetRanking200 = {
	rankingList: GetRanking200RankingListItem[];
};

/**
 * @summary Subscribes someone to the event
 */
export const getSubscriberToEventUrl = () => {
	return `http://localhost:3333/subscriptions`;
};

export const subscriberToEvent = async (
	subscriberToEventBody: SubscriberToEventBody,
	options?: RequestInit,
): Promise<SubscriberToEvent201> => {
	const res = await fetch(getSubscriberToEventUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(subscriberToEventBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: SubscriberToEvent201 = body ? JSON.parse(body) : {};

	return data;
};

/**
 * @summary Access invite link and redirects user
 */
export const getAccessInviteLinkUrl = (subscriberId: string) => {
	return `http://localhost:3333/invites/${subscriberId}`;
};

export const accessInviteLink = async (
	subscriberId: string,
	options?: RequestInit,
): Promise<unknown> => {
	const res = await fetch(getAccessInviteLinkUrl(subscriberId), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: unknown = body ? JSON.parse(body) : {};

	return data;
};

/**
 * @summary Get subscriber invite clicks count
 */
export const getGetSubscriberInviteClicksCountUrl = (subscriberId: string) => {
	return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`;
};

export const getSubscriberInviteClicksCount = async (
	subscriberId: string,
	options?: RequestInit,
): Promise<GetSubscriberInviteClicksCount200> => {
	const res = await fetch(getGetSubscriberInviteClicksCountUrl(subscriberId), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetSubscriberInviteClicksCount200 = body ? JSON.parse(body) : {};

	return data;
};

/**
 * @summary Get subscriber invites count
 */
export const getGetSubscriberInvitesCountUrl = (subscriberId: string) => {
	return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`;
};

export const getSubscriberInvitesCount = async (
	subscriberId: string,
	options?: RequestInit,
): Promise<GetSubscriberInvitesCount200> => {
	const res = await fetch(getGetSubscriberInvitesCountUrl(subscriberId), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetSubscriberInvitesCount200 = body ? JSON.parse(body) : {};

	return data;
};

/**
 * @summary Get subscriber invite ranking position
 */
export const getGetSubscriberInviteRankingPositionUrl = (
	subscriberId: string,
) => {
	return `http://localhost:3333/subscribers/${subscriberId}/ranking/position`;
};

/**
 * @summary Get subscriber invite ranking position
 */
export const getSubscriberInviteRankingPosition = async (
	subscriberId: string,
	options?: RequestInit,
): Promise<GetSubscriberInviteRankingPosition200> => {
	const res = await fetch(
		getGetSubscriberInviteRankingPositionUrl(subscriberId),
		{
			...options,
			method: "GET",
		},
	);

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetSubscriberInviteRankingPosition200 = body
		? JSON.parse(body)
		: {};

	return data;
};

/**
 * @summary Get ranking
 */
export const getGetRankingUrl = () => {
	return `http://localhost:3333/ranking`;
};

export const getRanking = async (
	options?: RequestInit,
): Promise<GetRanking200> => {
	const res = await fetch(getGetRankingUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetRanking200 = body ? JSON.parse(body) : {};

	return data;
};
